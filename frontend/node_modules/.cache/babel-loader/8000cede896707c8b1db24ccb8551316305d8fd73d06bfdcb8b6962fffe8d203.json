{"ast":null,"code":"var _jsxFileName = \"/Users/viviansun/d3-test/src/components/NetWorkGraph.js\",\n  _s = $RefreshSig$();\n// src/NetworkGraph.js\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NetworkGraph = () => {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    const width = 800;\n    const height = 600;\n\n    // Define the data for the network graph (nodes and links)\n    const data = {\n      nodes: [{\n        id: 'A'\n      }, {\n        id: 'B'\n      }, {\n        id: 'C'\n      }, {\n        id: 'D'\n      }, {\n        id: 'E'\n      }],\n      links: [{\n        source: 'A',\n        target: 'B'\n      }, {\n        source: 'A',\n        target: 'C'\n      }, {\n        source: 'B',\n        target: 'D'\n      }, {\n        source: 'C',\n        target: 'E'\n      }]\n    };\n\n    // Set up the SVG canvas\n    const svg = d3.select(svgRef.current).attr('width', width).attr('height', height).append('g');\n\n    // Create a simulation for the force-directed graph\n    const simulation = d3.forceSimulation(data.nodes).force('link', d3.forceLink(data.links).id(d => d.id).distance(150)).force('charge', d3.forceManyBody().strength(-300)).force('center', d3.forceCenter(width / 2, height / 2));\n\n    // Create link elements (edges)\n    const link = svg.selectAll('.link').data(data.links).enter().append('line').attr('class', 'link').attr('stroke', '#999').attr('stroke-width', 2);\n\n    // Create node elements (nodes)\n    const node = svg.selectAll('.node').data(data.nodes).enter().append('circle').attr('class', 'node').attr('r', 10).attr('fill', 'steelblue').call(d3.drag().on('start', dragStart).on('drag', drag).on('end', dragEnd));\n\n    // Add labels to the nodes\n    svg.selectAll('.label').data(data.nodes).enter().append('text').attr('class', 'label').attr('x', 12).attr('y', 4).text(d => d.id);\n\n    // Update the positions of the links and nodes\n    simulation.on('tick', () => {\n      link.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n      node.attr('cx', d => d.x).attr('cy', d => d.y);\n    });\n\n    // Drag event functions\n    function dragStart(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function drag(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragEnd(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkGraph, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = NetworkGraph;\nexport default NetworkGraph;\nvar _c;\n$RefreshReg$(_c, \"NetworkGraph\");","map":{"version":3,"names":["React","useRef","useEffect","d3","jsxDEV","_jsxDEV","NetworkGraph","_s","svgRef","width","height","data","nodes","id","links","source","target","svg","select","current","attr","append","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","link","selectAll","enter","node","call","drag","on","dragStart","dragEnd","text","x","y","event","active","alphaTarget","restart","fx","fy","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/viviansun/d3-test/src/components/NetWorkGraph.js"],"sourcesContent":["// src/NetworkGraph.js\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst NetworkGraph = () => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    const width = 800;\n    const height = 600;\n\n    // Define the data for the network graph (nodes and links)\n    const data = {\n      nodes: [\n        { id: 'A' },\n        { id: 'B' },\n        { id: 'C' },\n        { id: 'D' },\n        { id: 'E' },\n      ],\n      links: [\n        { source: 'A', target: 'B' },\n        { source: 'A', target: 'C' },\n        { source: 'B', target: 'D' },\n        { source: 'C', target: 'E' },\n      ],\n    };\n\n    // Set up the SVG canvas\n    const svg = d3.select(svgRef.current)\n      .attr('width', width)\n      .attr('height', height)\n      .append('g');\n\n    // Create a simulation for the force-directed graph\n    const simulation = d3.forceSimulation(data.nodes)\n      .force('link', d3.forceLink(data.links).id(d => d.id).distance(150))\n      .force('charge', d3.forceManyBody().strength(-300))\n      .force('center', d3.forceCenter(width / 2, height / 2));\n\n    // Create link elements (edges)\n    const link = svg.selectAll('.link')\n      .data(data.links)\n      .enter().append('line')\n      .attr('class', 'link')\n      .attr('stroke', '#999')\n      .attr('stroke-width', 2);\n\n    // Create node elements (nodes)\n    const node = svg.selectAll('.node')\n      .data(data.nodes)\n      .enter().append('circle')\n      .attr('class', 'node')\n      .attr('r', 10)\n      .attr('fill', 'steelblue')\n      .call(d3.drag()\n        .on('start', dragStart)\n        .on('drag', drag)\n        .on('end', dragEnd));\n\n    // Add labels to the nodes\n    svg.selectAll('.label')\n      .data(data.nodes)\n      .enter().append('text')\n      .attr('class', 'label')\n      .attr('x', 12)\n      .attr('y', 4)\n      .text(d => d.id);\n\n    // Update the positions of the links and nodes\n    simulation.on('tick', () => {\n      link\n        .attr('x1', d => d.source.x)\n        .attr('y1', d => d.source.y)\n        .attr('x2', d => d.target.x)\n        .attr('y2', d => d.target.y);\n\n      node\n        .attr('cx', d => d.x)\n        .attr('cy', d => d.y);\n    });\n\n    // Drag event functions\n    function dragStart(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n\n    function drag(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n\n    function dragEnd(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n  }, []);\n\n  return (\n    <div>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nexport default NetworkGraph;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,MAAM,GAAGP,MAAM,CAAC,CAAC;EAEvBC,SAAS,CAAC,MAAM;IACd,MAAMO,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;;IAElB;IACA,MAAMC,IAAI,GAAG;MACXC,KAAK,EAAE,CACL;QAAEC,EAAE,EAAE;MAAI,CAAC,EACX;QAAEA,EAAE,EAAE;MAAI,CAAC,EACX;QAAEA,EAAE,EAAE;MAAI,CAAC,EACX;QAAEA,EAAE,EAAE;MAAI,CAAC,EACX;QAAEA,EAAE,EAAE;MAAI,CAAC,CACZ;MACDC,KAAK,EAAE,CACL;QAAEC,MAAM,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAI,CAAC,EAC5B;QAAED,MAAM,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAI,CAAC,EAC5B;QAAED,MAAM,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAI,CAAC,EAC5B;QAAED,MAAM,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAI,CAAC;IAEhC,CAAC;;IAED;IACA,MAAMC,GAAG,GAAGd,EAAE,CAACe,MAAM,CAACV,MAAM,CAACW,OAAO,CAAC,CAClCC,IAAI,CAAC,OAAO,EAAEX,KAAK,CAAC,CACpBW,IAAI,CAAC,QAAQ,EAAEV,MAAM,CAAC,CACtBW,MAAM,CAAC,GAAG,CAAC;;IAEd;IACA,MAAMC,UAAU,GAAGnB,EAAE,CAACoB,eAAe,CAACZ,IAAI,CAACC,KAAK,CAAC,CAC9CY,KAAK,CAAC,MAAM,EAAErB,EAAE,CAACsB,SAAS,CAACd,IAAI,CAACG,KAAK,CAAC,CAACD,EAAE,CAACa,CAAC,IAAIA,CAAC,CAACb,EAAE,CAAC,CAACc,QAAQ,CAAC,GAAG,CAAC,CAAC,CACnEH,KAAK,CAAC,QAAQ,EAAErB,EAAE,CAACyB,aAAa,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAClDL,KAAK,CAAC,QAAQ,EAAErB,EAAE,CAAC2B,WAAW,CAACrB,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,CAAC,CAAC;;IAEzD;IACA,MAAMqB,IAAI,GAAGd,GAAG,CAACe,SAAS,CAAC,OAAO,CAAC,CAChCrB,IAAI,CAACA,IAAI,CAACG,KAAK,CAAC,CAChBmB,KAAK,CAAC,CAAC,CAACZ,MAAM,CAAC,MAAM,CAAC,CACtBD,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CACrBA,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CACtBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;;IAE1B;IACA,MAAMc,IAAI,GAAGjB,GAAG,CAACe,SAAS,CAAC,OAAO,CAAC,CAChCrB,IAAI,CAACA,IAAI,CAACC,KAAK,CAAC,CAChBqB,KAAK,CAAC,CAAC,CAACZ,MAAM,CAAC,QAAQ,CAAC,CACxBD,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CACrBA,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CACzBe,IAAI,CAAChC,EAAE,CAACiC,IAAI,CAAC,CAAC,CACZC,EAAE,CAAC,OAAO,EAAEC,SAAS,CAAC,CACtBD,EAAE,CAAC,MAAM,EAAED,IAAI,CAAC,CAChBC,EAAE,CAAC,KAAK,EAAEE,OAAO,CAAC,CAAC;;IAExB;IACAtB,GAAG,CAACe,SAAS,CAAC,QAAQ,CAAC,CACpBrB,IAAI,CAACA,IAAI,CAACC,KAAK,CAAC,CAChBqB,KAAK,CAAC,CAAC,CAACZ,MAAM,CAAC,MAAM,CAAC,CACtBD,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CACtBA,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZoB,IAAI,CAACd,CAAC,IAAIA,CAAC,CAACb,EAAE,CAAC;;IAElB;IACAS,UAAU,CAACe,EAAE,CAAC,MAAM,EAAE,MAAM;MAC1BN,IAAI,CACDX,IAAI,CAAC,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACX,MAAM,CAAC0B,CAAC,CAAC,CAC3BrB,IAAI,CAAC,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACX,MAAM,CAAC2B,CAAC,CAAC,CAC3BtB,IAAI,CAAC,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACV,MAAM,CAACyB,CAAC,CAAC,CAC3BrB,IAAI,CAAC,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACV,MAAM,CAAC0B,CAAC,CAAC;MAE9BR,IAAI,CACDd,IAAI,CAAC,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACe,CAAC,CAAC,CACpBrB,IAAI,CAAC,IAAI,EAAEM,CAAC,IAAIA,CAAC,CAACgB,CAAC,CAAC;IACzB,CAAC,CAAC;;IAEF;IACA,SAASJ,SAASA,CAACK,KAAK,EAAEjB,CAAC,EAAE;MAC3B,IAAI,CAACiB,KAAK,CAACC,MAAM,EAAEtB,UAAU,CAACuB,WAAW,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,CAAC;MACxDpB,CAAC,CAACqB,EAAE,GAAGrB,CAAC,CAACe,CAAC;MACVf,CAAC,CAACsB,EAAE,GAAGtB,CAAC,CAACgB,CAAC;IACZ;IAEA,SAASN,IAAIA,CAACO,KAAK,EAAEjB,CAAC,EAAE;MACtBA,CAAC,CAACqB,EAAE,GAAGJ,KAAK,CAACF,CAAC;MACdf,CAAC,CAACsB,EAAE,GAAGL,KAAK,CAACD,CAAC;IAChB;IAEA,SAASH,OAAOA,CAACI,KAAK,EAAEjB,CAAC,EAAE;MACzB,IAAI,CAACiB,KAAK,CAACC,MAAM,EAAEtB,UAAU,CAACuB,WAAW,CAAC,CAAC,CAAC;MAC5CnB,CAAC,CAACqB,EAAE,GAAG,IAAI;MACXrB,CAAC,CAACsB,EAAE,GAAG,IAAI;IACb;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE3C,OAAA;IAAA4C,QAAA,eACE5C,OAAA;MAAK6C,GAAG,EAAE1C;IAAO;MAAA2C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEV,CAAC;AAAC/C,EAAA,CAtGID,YAAY;AAAAiD,EAAA,GAAZjD,YAAY;AAwGlB,eAAeA,YAAY;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}