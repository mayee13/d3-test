{"ast":null,"code":"export class Heap {\n  // Construct Heap with comparator\n  constructor(compare = (a, b) => a - b) {\n    this.heap = [];\n    this.compare = compare;\n  }\n  parent(index) {\n    return Math.floor((index - 1) / 2);\n  }\n  leftChild(index) {\n    return 2 * index + 1;\n  }\n  rightChild(index) {\n    return 2 * index + 2;\n  }\n  size() {\n    return this.heap.length;\n  }\n  isEmpty() {\n    return this.size() === 0;\n  }\n  peek() {\n    if (this.heap.length === 0) {\n      throw new Error(\"heap is empty\");\n    }\n    return this.heap[0];\n  }\n  swap(i, j) {\n    if (i < 0 || j < 0 || i >= this.heap.length || j >= this.heap.length) {\n      throw new Error(\"one or more index is out of bounds\");\n    }\n    [this.heap[i], this.heap[j]] = [this.heap[j], this.heap[i]];\n  }\n  add(value) {\n    this.heap.push(value);\n    this.moveUp(this.heap.length - 1);\n  }\n\n  // helper function for add: recursively move up index\n  moveUp(index) {\n    const parentIndex = this.parent(index);\n    if (index > 0 && this.compare(this.heap[index], this.heap[parentIndex]) <= 0) {\n      this.swap(index, parentIndex);\n      this.moveUp(parentIndex);\n    }\n  }\n  remove() {\n    if (this.isEmpty()) {\n      throw new Error(\"list is empty\");\n    }\n    const firstElem = this.heap[0];\n    this.heap[0] = this.heap[this.heap.length - 1];\n    this.heap.pop();\n    this.moveDown(0);\n    return firstElem;\n  }\n\n  // helper function for remove: recursively move down index\n  moveDown(index) {\n    const leftIndex = this.leftChild(index);\n    const rightIndex = this.rightChild(index);\n    if (leftIndex < this.heap.length && rightIndex >= this.heap.length && this.compare(this.heap[index], this.heap[leftIndex]) > 0) {\n      // Case 1: there is only a left child\n      this.swap(index, leftIndex);\n      this.moveDown(leftIndex);\n    } else if (leftIndex < this.heap.length && rightIndex < this.heap.length) {\n      if (this.compare(this.heap[leftIndex], this.heap[rightIndex]) < 0 && this.compare(this.heap[index], this.heap[leftIndex]) > 0) {\n        // Case 2: left child is smaller and parent is greater \n        this.swap(index, leftIndex);\n        this.moveDown(leftIndex);\n      } else if (this.compare(this.heap[leftIndex], this.heap[rightIndex]) >= 0 && this.compare(this.heap[index], this.heap[rightIndex]) > 0) {\n        // Case 3: right childer is smaller and parent is greater \n        this.swap(index, rightIndex);\n        this.moveDown(rightIndex);\n      }\n    }\n  }\n}","map":{"version":3,"names":["Heap","constructor","compare","a","b","heap","parent","index","Math","floor","leftChild","rightChild","size","length","isEmpty","peek","Error","swap","i","j","add","value","push","moveUp","parentIndex","remove","firstElem","pop","moveDown","leftIndex","rightIndex"],"sources":["/Users/viviansun/d3-test/src/algorithm/heap.js"],"sourcesContent":["export class Heap  {\n\n    // Construct Heap with comparator\n    constructor (compare = (a, b) => a - b)  {\n        this.heap = []; \n        this.compare = compare; \n    }\n\n    parent(index) {\n        return Math.floor((index-1)/2); \n    }\n\n    leftChild(index) {\n        return 2 * index + 1; \n    }\n\n    rightChild(index) {\n        return 2 * index + 2; \n    }\n    size() {\n        return this.heap.length; \n    }\n\n    isEmpty()  {\n       return this.size() === 0; \n    }\n\n    peek() {\n        if (this.heap.length === 0) {\n            throw new Error(\"heap is empty\");\n        } \n        return this.heap[0]; \n    }\n\n    swap (i, j) {\n        if (i < 0 || j < 0 || i >= this.heap.length || j >= this.heap.length) {\n            throw new Error(\"one or more index is out of bounds\")\n        } \n        [this.heap[i], this.heap[j]] = [this.heap[j], this.heap[i]];\n    }\n\n    add(value) {\n        this.heap.push(value); \n        this.moveUp(this.heap.length - 1); \n    }\n\n    // helper function for add: recursively move up index\n    moveUp(index) {\n        const parentIndex = this.parent(index); \n        if (index > 0 && this.compare(this.heap[index], this.heap[parentIndex]) <= 0) {\n             this.swap(index, parentIndex); \n             this.moveUp(parentIndex); \n        }\n    }\n\n    remove() {\n       if (this.isEmpty()) {\n        throw new Error(\"list is empty\")\n       } \n\n       const firstElem = this.heap[0]; \n       this.heap[0] = this.heap[this.heap.length-1]; \n       this.heap.pop(); \n       this.moveDown(0); \n       return firstElem; \n    }\n\n    // helper function for remove: recursively move down index\n    moveDown(index) {\n        const leftIndex = this.leftChild(index);\n        const rightIndex = this.rightChild(index);\n        if (leftIndex < this.heap.length && rightIndex >= this.heap.length \n            && this.compare(this.heap[index], this.heap[leftIndex]) > 0) {\n                // Case 1: there is only a left child\n                this.swap(index, leftIndex); \n                this.moveDown(leftIndex);\n        } else if (leftIndex < this.heap.length && rightIndex < this.heap.length) {\n            if (this.compare(this.heap[leftIndex], this.heap[rightIndex]) < 0 \n                && this.compare(this.heap[index], this.heap[leftIndex]) > 0) {\n                    // Case 2: left child is smaller and parent is greater \n                    this.swap(index, leftIndex); \n                    this.moveDown(leftIndex); \n            } else if (this.compare(this.heap[leftIndex], this.heap[rightIndex]) >= 0 \n                && this.compare(this.heap[index], this.heap[rightIndex]) > 0) {\n                    // Case 3: right childer is smaller and parent is greater \n                    this.swap(index, rightIndex); \n                    this.moveDown(rightIndex); \n            }\n        }\n    }\n\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}