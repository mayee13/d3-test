{"ast":null,"code":"var _jsxFileName = \"/Users/viviansun/d3-test/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n// import BarChart from './components/BarChart';\nimport NetworkGraph from './components/NetWorkGraph';\n// import DirectedGraph from './components/DirectedGraph';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [graphs, setGraphs] = useState([]);\n  const [currentGraph, setCurrentGraph] = useState({\n    nodes: [],\n    links: []\n  });\n  const [graphName, setGraphName] = useState(\"\");\n  const [pageState, setPageState] = useState(1);\n\n  // Fetch saved graphs on component mount\n  useEffect(() => {\n    fetchSavedGraphs();\n  }, []);\n  const saveGraph = async graph => {\n    if (!graphName) {\n      alert(\"Please enter a name for your graph.\");\n      return;\n    }\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/save-graph\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: graphName,\n          nodes: graph.nodes,\n          links: graph.links\n        })\n      });\n      const data = await response.json();\n      if (data.message === \"Graph saved successfully!\") {\n        alert(data.message);\n        fetchSavedGraphs(); // Refresh the list of saved graphs\n      }\n    } catch (error) {\n      console.error(\"Error saving graph:\", error);\n    }\n  };\n\n  // TODO: Fetch saved graphs on component mount\n  const fetchSavedGraphs = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/saved-graphs\");\n      const data = await response.json();\n      setGraphs(data);\n    } catch (error) {\n      console.error(\"Error fetching saved graphs:\", error);\n    }\n  };\n  const fetchGraphByName = async name => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/graph/${name}`);\n      const data = await response.json();\n      if (!data.error) {\n        setCurrentGraph(data);\n      } else {\n        console.error(data.error);\n      }\n    } catch (error) {\n      console.error(\"Error fetching graph:\", error);\n    }\n  };\n  const doCreate = () => {\n    setPageState(2);\n  };\n  const doBackClick = () => {\n    setPageState(1);\n    setCurrentGraph({\n      nodes: [],\n      links: []\n    });\n    setGraphName(\"\");\n  };\n  if (pageState === 1) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Saved Graphs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: graphs.map(graph => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => fetchGraphByName(graph.name),\n            children: graph.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)\n        }, graph.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: graphName,\n        onChange: e => setGraphName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: doCreate,\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Testing Network Graphs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NetworkGraph, {\n      data: currentGraph,\n      onSaveClick: saveGraph,\n      onBackClick: doBackClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"AB9ZGZmKa2+mA0xrgrTgBjuJk6I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","NetworkGraph","jsxDEV","_jsxDEV","App","_s","graphs","setGraphs","currentGraph","setCurrentGraph","nodes","links","graphName","setGraphName","pageState","setPageState","fetchSavedGraphs","saveGraph","graph","alert","response","fetch","method","headers","body","JSON","stringify","name","data","json","message","error","console","fetchGraphByName","doCreate","doBackClick","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","type","value","onChange","e","target","style","padding","onSaveClick","onBackClick","_c","$RefreshReg$"],"sources":["/Users/viviansun/d3-test/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n// import BarChart from './components/BarChart';\nimport NetworkGraph from './components/NetWorkGraph';\n// import DirectedGraph from './components/DirectedGraph';\n\nconst App = () => {\n    const [graphs, setGraphs] = useState([]);\n    const [currentGraph, setCurrentGraph] = useState({ nodes: [], links: [] });\n    const [graphName, setGraphName] = useState(\"\");\n    const [pageState, setPageState] = useState(1);\n\n    // Fetch saved graphs on component mount\n    useEffect(() => {\n        fetchSavedGraphs();\n    }, []);\n\n\n    const saveGraph = async (graph) => {\n        if (!graphName) {\n            alert(\"Please enter a name for your graph.\");\n            return;\n          }\n          try {\n            const response = await fetch(\"http://127.0.0.1:5000/save-graph\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                name: graphName,\n                nodes: graph.nodes,\n                links: graph.links,\n              }),\n            });\n      \n            const data = await response.json();\n            if (data.message === \"Graph saved successfully!\") {\n              alert(data.message);\n              fetchSavedGraphs(); // Refresh the list of saved graphs\n            }\n          } catch (error) {\n            console.error(\"Error saving graph:\", error);\n          }\n    }\n\n    // TODO: Fetch saved graphs on component mount\n    const fetchSavedGraphs = async () => {\n        try {\n            const response = await fetch(\"http://127.0.0.1:5000/saved-graphs\");\n            const data = await response.json();\n            setGraphs(data);\n          } catch (error) {\n            console.error(\"Error fetching saved graphs:\", error);\n          }\n    }\n\n    const fetchGraphByName = async (name) => {\n        try {\n            const response = await fetch(`http://127.0.0.1:5000/graph/${name}`);\n            const data = await response.json();\n            if (!data.error) {\n              setCurrentGraph(data);\n            } else {\n              console.error(data.error);\n            }\n          } catch (error) {\n            console.error(\"Error fetching graph:\", error);\n          }\n    }\n    \n    const doCreate = () => {\n        setPageState(2); \n    }\n\n    const doBackClick = () => {\n        setPageState(1); \n        setCurrentGraph({ nodes: [], links: [] })\n        setGraphName(\"\")\n    }\n\n    if (pageState === 1) {\n        return (<div>\n            <h2>Saved Graphs</h2>\n        <ul>\n          {graphs.map((graph) => (\n            <li key={graph.name}>\n              <button onClick={() => fetchGraphByName(graph.name)}>\n                {graph.name}\n              </button>\n            </li>\n          ))}\n        </ul>\n        <input type=\"text\" value={graphName} onChange={(e) => setGraphName(e.target.value)}></input>\n        <button onClick={doCreate}>Create</button>\n        </div>)\n    }\n    return (\n        <div style={{ padding: '20px' }}>\n            <h1>Testing Network Graphs</h1>\n            <NetworkGraph data = {currentGraph} onSaveClick={saveGraph} onBackClick={doBackClick}/>\n        </div>\n    );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}