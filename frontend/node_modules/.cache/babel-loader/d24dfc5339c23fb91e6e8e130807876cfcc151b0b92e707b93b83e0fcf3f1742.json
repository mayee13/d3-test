{"ast":null,"code":"var _jsxFileName = \"/Users/viviansun/d3-test/src/components/NetWorkGraph.js\",\n  _s = $RefreshSig$();\n// src/NetworkGraph.js\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NetworkGraph = () => {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    const width = 600;\n    const height = 400;\n\n    // graph data (nodes and edges)\n    const data = {\n      nodes: [{\n        id: 'A'\n      }, {\n        id: 'B'\n      }, {\n        id: 'C'\n      }, {\n        id: 'D'\n      }],\n      links: [{\n        source: 'A',\n        target: 'B'\n      }, {\n        source: 'B',\n        target: 'C'\n      }, {\n        source: 'C',\n        target: 'D'\n      }, {\n        source: 'D',\n        target: 'A'\n      }]\n    };\n    const nodes = data.nodes;\n    const links = data.links;\n    const linkSelection = svg.selectAll(\"line\").data(links).enter().append(\"line\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 1);\n    const nodeSelection = svg.selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 10).attr(\"fill\", 'steelblue').call(d3.drag().on(\"start\", dragStart).on(\"drag\", drag).on(\"end\", dragEnd));\n\n    // initialize canvas to hold the graph\n    const svg = d3.select(svgRef.current).attr('width', 600).attr('height', 400);\n    const simulation = d3.forceSimulation(data.nodes);\n    simulation.force(\"center\", d3.forceCenter(width / 2, height / 2)).force(\"nodes\", d3.forceManyBody()).force(\"links\", d3.forceLink(links).id(d => d.id).distance(100)).on(\"tick\", ticked);\n    function ticked() {\n      nodeSelection.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      linkSelection.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n    }\n    function dragStart(d) {\n      // console.log('drag start');\n      simulation.alphaTarget(0.5).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function drag(d) {\n      // console.log('dragging');\n      // simulation.alpha(0.5).restart()\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    }\n    function dragEnd(d) {\n      // console.log('drag end');\n      simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 10\n  }, this);\n};\n_s(NetworkGraph, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = NetworkGraph;\nexport default NetworkGraph;\nvar _c;\n$RefreshReg$(_c, \"NetworkGraph\");","map":{"version":3,"names":["React","useRef","useEffect","d3","jsxDEV","_jsxDEV","NetworkGraph","_s","svgRef","width","height","data","nodes","id","links","source","target","linkSelection","svg","selectAll","enter","append","attr","nodeSelection","call","drag","on","dragStart","dragEnd","select","current","simulation","forceSimulation","force","forceCenter","forceManyBody","forceLink","d","distance","ticked","x","y","alphaTarget","restart","fx","fy","event","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/viviansun/d3-test/src/components/NetWorkGraph.js"],"sourcesContent":["// src/NetworkGraph.js\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst NetworkGraph = () => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    const width = 600;\n    const height = 400;\n\n    // graph data (nodes and edges)\n    const data = {\n        nodes: [\n            { id: 'A' },\n            { id: 'B' },\n            { id: 'C' },\n            { id: 'D' },\n          ],\n          links: [\n            { source: 'A', target: 'B' },\n            { source: 'B', target: 'C' },\n            { source: 'C', target: 'D' },\n            { source: 'D', target: 'A' },\n          ],\n      };\n\n      const nodes = data.nodes; \n      const links = data.links; \n\n      const linkSelection = svg\n        .selectAll(\"line\")\n        .data(links)\n        .enter()\n        .append(\"line\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", 1);\n\nconst nodeSelection = svg\n  .selectAll(\"circle\")\n  .data(nodes)\n  .enter()\n  .append(\"circle\")\n  .attr(\"r\", 10)\n  .attr(\"fill\", 'steelblue')\n  .call(\n    d3\n      .drag()\n      .on(\"start\", dragStart)\n      .on(\"drag\", drag)\n      .on(\"end\", dragEnd)\n  );\n\n      // initialize canvas to hold the graph\n      const svg = d3.select(svgRef.current)\n        .attr('width', 600)\n        .attr('height', 400);\n    \n     const simulation = d3.forceSimulation(data.nodes); \n     simulation\n       .force(\"center\", d3.forceCenter(width / 2, height / 2))\n       .force(\"nodes\", d3.forceManyBody())\n       .force(\n         \"links\",\n         d3\n           .forceLink(links)\n           .id(d => d.id)\n           .distance(100)\n       )\n       .on(\"tick\", ticked);\n\n       function ticked() {      \n        nodeSelection.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      \n        linkSelection\n          .attr(\"x1\", d => d.source.x)\n          .attr(\"y1\", d => d.source.y)\n          .attr(\"x2\", d => d.target.x)\n          .attr(\"y2\", d => d.target.y);\n      }\n\n      function dragStart(d) {\n        // console.log('drag start');\n        simulation.alphaTarget(0.5).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n      \n      function drag(d) {\n        // console.log('dragging');\n        // simulation.alpha(0.5).restart()\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n      }\n      \n      function dragEnd(d) {\n        // console.log('drag end');\n        simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      }\n  }, [])\n\n  return <div>\n    <svg ref = {svgRef}></svg\n    ></div>\n};\n\nexport default NetworkGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}